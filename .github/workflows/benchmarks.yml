name: Benchmark Tests

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'benchmarks_test.go'
      - 'benchmark_update.sh'
      - '.github/workflows/benchmarks.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'benchmarks_test.go'
      - 'benchmark_update.sh'
      - '.github/workflows/benchmarks.yml'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  benchmark:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23, 1.24]

    steps:
    - uses: actions/checkout@v5

    - name: Configure git author
      run: |
        git config user.name "ambicuity Ritesh Rana"  
        git config user.email "riteshrana36@gmail.com"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run standard tests
      run: go test -v ./...

    - name: Run benchmark tests
      run: |
        echo "Running core benchmark tests..."
        go test -bench=BenchmarkOneRoute -benchtime=2s -benchmem
        go test -bench=BenchmarkRecoveryMiddleware -benchtime=2s -benchmem
        go test -bench=BenchmarkLoggerMiddleware -benchtime=2s -benchmem
        go test -bench=BenchmarkOneRouteJSON -benchtime=2s -benchmem

    - name: Run comprehensive benchmarks
      run: |
        echo "Running comprehensive benchmark suite..."
        go test -bench=. -benchmem -benchtime=1s | head -30

    - name: Test benchmark automation script
      run: |
        echo "Testing benchmark_update.sh script..."
        chmod +x benchmark_update.sh
        ./benchmark_update.sh

    - name: Validate benchmark script output
      run: |
        echo "Validating benchmark script generates proper format..."
        output=$(./benchmark_update.sh)
        if echo "$output" | grep -q "VM HOST:.*Machine:.*Date:.*Version:.*Go Version:"; then
          echo "‚úÖ Benchmark script output format is correct"
        else
          echo "‚ùå Benchmark script output format is incorrect"
          exit 1
        fi

    - name: Performance regression check
      run: |
        echo "Running performance regression checks..."
        # Run BenchmarkOneRoute and check if it's reasonably fast (< 200ns/op)
        result=$(go test -bench=BenchmarkOneRoute -benchtime=2s | grep "BenchmarkOneRoute-" | head -1 | awk '{print $3}')
        if [ ! -z "$result" ]; then
          # Extract numeric value (remove "ns/op" suffix)
          ns_per_op=$(echo "$result" | sed 's/ns\/op//')
          echo "BenchmarkOneRoute performance: ${ns_per_op} ns/op"
          # Simple numeric comparison without bc (works for integers)
          ns_int=$(echo "$ns_per_op" | cut -d. -f1)
          if [ "$ns_int" -lt 200 ] 2>/dev/null; then
            echo "‚úÖ Performance is within acceptable range"
          else
            echo "‚ö†Ô∏è  Performance might be degraded: ${ns_per_op} ns/op"
          fi
        else
          echo "‚ùå Could not extract benchmark results"
          exit 1
        fi

  benchmark-report:
    runs-on: ubuntu-latest
    needs: benchmark
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') || github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - uses: actions/checkout@v5

    - name: Configure git author
      run: |
        git config user.name "ambicuity Ritesh Rana"  
        git config user.email "riteshrana36@gmail.com"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Generate benchmark report
      run: |
        echo "Generating comprehensive benchmark report..."
        chmod +x benchmark_update.sh
        
        # Create comprehensive report
        echo "# üöÄ Gin Framework Benchmark Report" > benchmark_report.txt
        echo "" >> benchmark_report.txt
        ./benchmark_update.sh >> benchmark_report.txt
        echo "" >> benchmark_report.txt
        
        echo "## üìä Detailed Benchmark Results" >> benchmark_report.txt
        echo "" >> benchmark_report.txt
        echo "### Core Performance Benchmarks" >> benchmark_report.txt
        echo "\`\`\`" >> benchmark_report.txt
        go test -bench="BenchmarkOneRoute|BenchmarkRecoveryMiddleware|BenchmarkLoggerMiddleware|BenchmarkOneRouteJSON|BenchmarkGinJSONRenderOptimized" -benchmem -benchtime=2s 2>/dev/null | grep "^Benchmark" >> benchmark_report.txt
        echo "\`\`\`" >> benchmark_report.txt
        echo "" >> benchmark_report.txt
        
        echo "### All Benchmark Results" >> benchmark_report.txt
        echo "\`\`\`" >> benchmark_report.txt
        go test -bench=. -benchmem -benchtime=1s 2>/dev/null | grep "^Benchmark" >> benchmark_report.txt
        echo "\`\`\`" >> benchmark_report.txt
        echo "" >> benchmark_report.txt
        
        echo "### Performance Summary" >> benchmark_report.txt
        echo "| Benchmark | Performance | Memory | Allocations |" >> benchmark_report.txt
        echo "|-----------|-------------|---------|-------------|" >> benchmark_report.txt
        go test -bench="BenchmarkOneRoute|BenchmarkOneRouteJSON|BenchmarkGinJSONRenderOptimized" -benchmem -benchtime=1s 2>/dev/null | grep "^Benchmark" | awk '{print "| " $1 " | " $3 " | " $5 " | " $7 " |"}' >> benchmark_report.txt

    - name: Upload benchmark report
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-report
        path: benchmark_report.txt
        retention-days: 30

    - name: Create benchmark summary for easy viewing
      run: |
        echo "# üöÄ Gin Framework Benchmark Summary" > benchmark_summary.md
        echo "" >> benchmark_summary.md
        echo "**Generated:** $(date)" >> benchmark_summary.md
        echo "**System:** $(uname -a)" >> benchmark_summary.md
        echo "**Go Version:** $(go version)" >> benchmark_summary.md
        echo "" >> benchmark_summary.md
        echo "## üìà Key Performance Metrics" >> benchmark_summary.md
        echo "" >> benchmark_summary.md
        echo "| Benchmark | Performance | Memory | Allocations |" >> benchmark_summary.md
        echo "|-----------|-------------|---------|-------------|" >> benchmark_summary.md
        go test -bench="BenchmarkOneRoute|BenchmarkOneRouteJSON|BenchmarkGinJSONRenderOptimized" -benchmem -benchtime=1s 2>/dev/null | grep "^Benchmark" | head -6 | awk '{print "| " $1 " | " $3 " | " $5 " | " $7 " |"}' >> benchmark_summary.md
        echo "" >> benchmark_summary.md
        echo "## üìã How to View Full Results" >> benchmark_summary.md
        echo "" >> benchmark_summary.md
        echo "1. Go to the [Actions tab](../../actions)" >> benchmark_summary.md
        echo "2. Click on this workflow run" >> benchmark_summary.md
        echo "3. Download the 'benchmark-report' artifact" >> benchmark_summary.md
        echo "4. Extract and view \`benchmark_report.txt\`" >> benchmark_summary.md

    - name: Upload benchmark summary  
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-summary
        path: benchmark_summary.md
        retention-days: 30

    - name: Comment on PR with benchmark results (if PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const fs = require('fs');
            const report = fs.readFileSync('benchmark_report.txt', 'utf8');
            
            // Create a more concise summary for PR comments
            const lines = report.split('\n');
            const summaryStart = lines.findIndex(line => line.includes('Performance Summary'));
            let summary = '';
            
            if (summaryStart !== -1) {
              // Get the table section
              const tableLines = lines.slice(summaryStart, summaryStart + 10).join('\n');
              summary = `## üöÄ Benchmark Results Summary\n\n${lines[4]}\n\n${tableLines}\n\nüìã **Full report available in [workflow artifacts](${context.payload.pull_request.html_url}/checks)**`;
            } else {
              // Fallback to truncated version
              summary = `## üöÄ Benchmark Results\n\n${report.substring(0, 1500)}${report.length > 1500 ? '\n\n... (truncated, see full report in artifacts)' : ''}`;
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
            
            console.log('‚úÖ Successfully posted benchmark results to PR');
          } catch (error) {
            console.log('‚ö†Ô∏è Failed to post PR comment:', error.message);
            console.log('üìã Benchmark results are still available in workflow artifacts');
          }

    - name: Output benchmark summary (fallback)
      if: github.event_name == 'pull_request'
      run: |
        echo "## üöÄ Benchmark Results Summary"
        echo "=================================="
        echo ""
        if [ -f benchmark_report.txt ]; then
          echo "üìä System Information:"
          head -10 benchmark_report.txt | tail -5
          echo ""
          echo "üìà Performance Summary:"
          echo "| Benchmark | Performance | Memory | Allocations |"
          echo "|-----------|-------------|---------|-------------|"
          go test -bench="BenchmarkOneRoute|BenchmarkOneRouteJSON|BenchmarkGinJSONRenderOptimized" -benchmem -benchtime=1s 2>/dev/null | grep "^Benchmark" | head -6 | awk '{print "| " $1 " | " $3 " | " $5 " | " $7 " |"}'
          echo ""
          echo "üìã Full report available in workflow artifacts"
        else
          echo "‚ùå Benchmark report not found"
        fi